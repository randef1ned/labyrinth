% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/random_walk.R
\name{random_walk}
\alias{random_walk}
\title{Graph diffusion using a Markov random walk}
\usage{
random_walk(
  p0,
  graph,
  r = 0.5,
  niter = 10000,
  thresh = 1e-04,
  do.analytical = FALSE,
  correct.for.hubs = FALSE,
  allow.ergodic = FALSE,
  return.pt.only = FALSE
)
}
\arguments{
\item{p0}{an \eqn{n \times p}-dimensional numeric non-negative vector/matrix
representing the starting distribution of the Markov chain
(does not need to sum to one).}

\item{graph}{an \eqn{n \times p}-dimensional numeric non-negative adjacence
\code{\link[base]{matrix}} (or
\code{\link[Matrix:dgCMatrix-class]{dgCMatrix}}) representing the graph}

\item{r}{a scalar between \eqn{(0, 1)}. restart probability if a Markov
random walk with restart is desired}

\item{niter}{maximal number of iterations for computation of the
Markov chain. If \code{thresh} is not reached, then \code{niter} is used as
stop criterion.}

\item{thresh}{threshold for breaking the iterative computation of the
stationary distribution. If the absolute difference of the distribution at
time point \eqn{t-1} and \eqn{t} is less than \code{thresh}, then the
algorithm stops. If \code{thresh} is not reached before \code{niter}, then
the algorithm stops as well.}

\item{do.analytical}{boolean if the stationary distribution shall be
computed solving the analytical solution or rather iteratively}

\item{correct.for.hubs}{if \code{TRUE} multiplies a correction factor to the
nodes, such that the random walk gets not biased to nodes with high
degree. In that case the original input matrix will be normalized as:
\deqn{ P(j | i) = \dfrac{1}{\text{degree}(i)} \times
  \min \left(1, \dfrac{\text{degree}(i)}{\text{degree}(j)}\right)}
\emph{Note that this will not consider edge weights.}}

\item{allow.ergodic}{Allow multiple components in a graph.}

\item{return.pt.only}{Return pt only.}
}
\value{
returns a list with the following elements
 \itemize{
  \item \code{p.inf}  the stationary distribution as numeric vector
  \item \code{transition.matrix} the column normalized transition matrix used
        for the random walk
 }
}
\description{
A Markov Random Walk takes an inital distribution \eqn{p_0}
and calculates the stationary distribution of that.
The diffusion process is regulated by a restart probability \eqn{r} which
controls how often the MRW jumps back to the initial values.

The source code was brought from diffusr v0.2.1.
}
\examples{
# count of nodes
n <- 5
# starting distribution (has to sum to one)
p0    <- as.vector(rmultinom(1, 1, prob = rep(.2, n)))
# adjacency matrix (either normalized or not)
graph <- matrix(abs(rnorm(n * n)), n, n)

# computation of stationary distribution
pt    <- random_walk(p0, graph)

# draw histogram of the `pt` vector
hist(pt$p.inf)
}
\references{
Tong, H., Faloutsos, C., & Pan, J. Y. (2006),
Fast random walk with restart and its applications.

Koehler, S., Bauer, S., Horn, D., & Robinson, P. N. (2008),
Walking the interactome for prioritization of candidate disease genes.
\emph{The American Journal of Human Genetics}
}
